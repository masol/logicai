import { BaseModel, refprop } from "../../basemodel.js";

// 保存了主角涉及的事件--这些事件构成了驱动小说前进的
export class Story extends BaseModel {
    static key = "Story";
    static basePath = "story"

    // 保存临时调用保存的，当前位置可用的历史骨架．
    @refprop("outlines", [])
    outlines!: Record<string, any>[]

    // 保存针对特定历史骨架扩展后的势力图．
    @refprop("forces", [])
    forces!: Record<string, any>[]

}

// import { 叙事结构, 情节单元, 故事 } from './plot.js'
// // ===== 叙事策略 =====
// interface 叙事策略 {
//     结构: 叙事结构;
//     节奏模式: '平稳' | '递增' | '分段' | '高潮型';
//     主题演化: {
//         起始: string[];
//         发展: string[];
//         高潮: string[];
//         结局: string[];
//     };
//     角色成长弧: {
//         角色Id: string;
//         起始状态: string;
//         转变过程: string;
//         结束状态: string;
//     }[];
//     基调: '黑暗' | '明亮' | '讽刺' | '史诗' | '现实';
//     视角策略: '单一' | '多视角' | '全知';
// }

// // ===== 情节连接 =====
// interface 情节边 {
//     起点: string; // 情节单元id
//     终点: string;
//     类型: '因果' | '时间' | '主题' | '对比';
//     强度: number; // 0-1
//     条件?: string; // 分支条件
// }

// type 情节图 = {
//     节点: Map<string, 情节单元>;
//     边: 情节边[];
// };

// // ===== 叙事状态机 =====
// type 叙事阶段 =
//     | '铺垫'
//     | '引发事件'
//     | '上升行动'
//     | '中点'
//     | '至暗时刻'
//     | '高潮'
//     | '回落'
//     | '结局';

// interface 叙事状态 {
//     当前阶段: 叙事阶段;
//     已完成阶段: 叙事阶段[];
//     当前幕: number;
//     全局紧张度: number; // 0-10
//     主题一致性: number; // 0-1
//     角色成长进度: Map<string, number>;
//     未解决线索: string[];
// }

// // ===== 叙事架构管理器 =====

// class 叙事架构管理器 {
//     // 故事: 故事;
//     // 策略: 叙事策略;
//     // 图: 情节图;
//     // 状态: 叙事状态;

//     // llm接口: LLM接口;

//     // constructor(初始故事: Partial<故事>, 策略: 叙事策略) {
//     //     this.故事 = {
//     //         id: crypto.randomUUID(),
//     //         情节单元: [],
//     //         ...初始故事
//     //     };
//     //     this.策略 = 策略;
//     //     this.图 = { 节点: new Map(), 边: [] };
//     //     this.状态 = this.初始化状态();
//     // }

//     // // 1. 规划骨架
//     // async 规划骨架(): Promise<情节单元[]> {
//     //     const 提示: LLM提示模板 = {
//     //         角色: "主叙事者",
//     //         任务: "生成",
//     //         上下文: {
//     //             类型: this.故事.类型,
//     //             主题: this.策略.主题演化.高潮,
//     //             结构: this.策略.结构.名称
//     //         },
//     //         约束条件: [
//     //             "只生成关键情节点（如 引发事件, 高潮）",
//     //             "标注 叙事功能",
//     //             "符合三幕剧结构"
//     //         ],
//     //         输出格式: "json"
//     //     };

//     //     const 关键节点 = await this.llm接口.生成<情节单元[]>(提示);
//     //     关键节点.forEach(单元 => this.图.节点.set(单元.id, 单元));
//     //     return 关键节点;
//     // }

//     // // 2. 填充中间情节
//     // async 填充中间(起点Id: string, 终点Id: string): Promise<情节单元[]> {
//     //     const 起点 = this.图.节点.get(起点Id);
//     //     const 终点 = this.图.节点.get(终点Id);

//     //     const 提示: LLM提示模板 = {
//     //         角色: "情节桥梁师",
//     //         任务: "生成",
//     //         上下文: { 起点, 终点, 主题: this.策略.主题演化.发展 },
//     //         约束条件: [
//     //             "生成2-3个过渡情节单元",
//     //             "建立因果连接",
//     //             "逐步提升紧张度"
//     //         ],
//     //         输出格式: "json"
//     //     };

//     //     const 过渡单元 = await this.llm接口.生成<情节单元[]>(提示);
//     //     let 当前Id = 起点Id;

//     //     过渡单元.forEach(单元 => {
//     //         this.图.节点.set(单元.id, 单元);
//     //         this.图.边.push({
//     //             起点: 当前Id,
//     //             终点: 单元.id,
//     //             类型: "因果",
//     //             强度: 0.8
//     //         });
//     //         当前Id = 单元.id;
//     //     });

//     //     this.图.边.push({
//     //         起点: 过渡单元[过渡单元.length - 1].id,
//     //         终点: 终点Id,
//     //         类型: "因果",
//     //         强度: 0.9
//     //     });

//     //     return 过渡单元;
//     // }

//     // // 3. 评估连贯性
//     // async 评估连贯性(): Promise<number> {
//     //     const 提示: LLM提示模板 = {
//     //         角色: "故事分析师",
//     //         任务: "评估",
//     //         上下文: { 情节单元: Array.from(this.图.节点.values()) },
//     //         约束条件: ["评分0-1", "从角色、因果、主题三方面分析"],
//     //         输出格式: "json"
//     //     };

//     //     const 结果 = await this.llm接口.评估<{ 评分: number; 建议: string }>(提示);
//     //     return 结果.评分;
//     // }

//     // // 4. 生成最终故事
//     // 完成故事(): 故事 {
//     //     const 线性情节 = 拓扑排序(this.图.节点, this.图.边);
//     //     const 连贯性 = this.评估连贯性();

//     //     return {
//     //         ...this.故事,
//     //         情节单元: 线性情节,
//     //         连贯性评分: 连贯性,
//     //         节奏曲线: 线性情节.map((u, i) => ({ 单元索引: i, 紧张度: u.紧张度 }))
//     //     };
//     // }

//     // private 初始化状态(): 叙事状态 {
//     //     return {
//     //         当前阶段: '铺垫',
//     //         已完成阶段: [],
//     //         当前幕: 1,
//     //         全局紧张度: 1,
//     //         主题一致性: 0,
//     //         角色成长进度: new Map(),
//     //         未解决线索: []
//     //     };
//     // }
// }

// /**
//  * 总结：设计情节的标准思考顺序
// 1. 核心冲突 → 
// 2. 主角欲望 → 
// 3. 主题 → 
// 4. 世界观 → 
// 5. 叙事结构

// 这个顺序确保你的故事：

// 有动力（欲望驱动）
// 有张力（冲突持续）
// 有深度（主题支撑）
// 有逻辑（设定合理）
// 有节奏（结构清晰）
//  */